/*
 * generated by Xtext
 */
package be.unamur.coreal.scoping

import be.unamur.coreal.coreAL.Class
import be.unamur.coreal.coreAL.Enumeration
import be.unamur.coreal.coreAL.EnumerationLiteral
import be.unamur.coreal.coreAL.MemberSelection
import be.unamur.coreal.coreAL.Reference
import be.unamur.coreal.lib.CoreALLib
import be.unamur.coreal.typing.CoreALTypeProvider
import com.google.inject.Inject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

import static extension be.unamur.coreal.util.CoreALModelUtil.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class CoreALScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject extension CoreALTypeProvider
	@Inject extension CoreALLib

	def scope_Reference_opposite(Reference context, EReference r) {
		var parentScope = IScope::NULLSCOPE
		val reftype = context.collectionType.type
		if (reftype.ref != null && reftype.ref instanceof Class)
			return Scopes::scopeFor((reftype.ref as Class).references, parentScope)
		else
			return parentScope
	}

	def scope_MemberSelection_member(MemberSelection sel, EReference ref) {
		var parentScope = IScope::NULLSCOPE
		var type = sel.receiver.typeFor
		if (type == null || type.isPrimitiveType)
			return parentScope
		if (type instanceof Class) {
			val features = (type as Class).selectedFeatures(sel)
			for (c : type.classHierarchyWithObject.reverseView) {
				parentScope = Scopes::scopeFor(c.selectedFeatures(sel), parentScope)
			}
			return Scopes::scopeFor(features, parentScope)
		}
	}

	def scope_EnumLiteral(EnumerationLiteral lit, EReference ref) {
		var parentScope = IScope::NULLSCOPE
		if (lit.enumeration instanceof Enumeration)
			return Scopes::scopeFor((lit.enumeration as Enumeration).literals, parentScope)
		else
			return parentScope
	}

	def selectedFeatures(Class type, MemberSelection sel) {
		if (sel.methodinvocation)
			type.operations + type.properties
		else
			type.properties + type.operations
	}

}
