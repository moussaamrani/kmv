load /cygdrive/z/Workspace/Maude/KMV/syntax/Kermeta-MT.maude

mod CN-MT is
	protecting KERMETA-MT .
	
	*** Metamodel & Package ***

	--- Metamodel declaration	  
	op ColoredGraphMT' : -> @Metamodel .
	eq name(ColoredGraphMT') = "ColoredGraphMT'" .
	eq packages (ColoredGraphMT') = ColoredGraphPkg' .

	--- Package declaration
	op ColoredGraphPkg' : -> @Package .
	eq name(ColoredGraphPkg') = "ColoredGraph" .
	eq metamodel(ColoredGraphPkg') = ColoredGraphMT' .
	eq superPackage(ColoredGraphPkg') = null .
	eq subPackages(ColoredGraphPkg') = nil .
	eq classes(ColoredGraphPkg') = __(ColoredGraph, Edge, ColoredNode, Color) .

	*** Classes ***
	
	--- ColoredGraph
	
	sort ColoredGraph .
	subsort ColoredGraph < @Class .
	op ColoredGraph : -> ColoredNode .
	eq name(ColoredGraph) = "ColoredGraph" .
	eq isAbstract(ColoredGraph) = false .
	eq package(ColoredGraph) = ColoredGraphPkg' .
	eq superTypes (ColoredGraph) = nil .
	eq references (ColoredGraph) = edges@ColoredGraph nodes@ColoredGraph .
	eq attributes (ColoredGraph) = nil . 
	eq operations (ColoredGraph) = nil .
	
	op nodes@ColoredGraph : -> @Reference .
	eq name (nodes@ColoredGraph) = "nodes" .
	eq opposite (nodes@ColoredGraph) = null .
	eq type (nodes@ColoredGraph) = ColoredNode .
	eq lowerBound (nodes@ColoredGraph) = 0 .
	eq upperBound (nodes@ColoredGraph) = * .
	eq containingClass (nodes@ColoredGraph) = ColoredGraph' .
	eq isOrdered (nodes@ColoredGraph) = false .
	eq isUnique (nodes@ColoredGraph) = true .
	eq isContainment (nodes@ColoredGraph) = true .
	
	op edges@ColoredGraph' : -> @Reference .
	eq name (edges@ColoredGraph') = "edges" .
	eq opposite (edges@ColoredGraph') = null .
	eq type (edges@ColoredGraph') = Edge .
	eq lowerBound (edges@ColoredGraph') = 0 .
	eq upperBound (edges@ColoredGraph') = * .
	eq containingClass (edges@ColoredGraph') = ColoredGraph' .
	eq isOrdered (edges@ColoredGraph') = false .
	eq isUnique (edges@ColoredGraph') = true .
	eq isContainment (edges@ColoredGraph') = true .
	
	
	--- ColoredNode
	
	sort ColoredNode .
	subsort ColoredNode < @Class .
	op ColoredNode : -> ColoredNode .
	eq name(ColoredNode) = "ColoredNode" .
	eq isAbstract(ColoredNode) = false .
	eq package(ColoredNode) = ColoredGraphPkg' .
	eq superTypes (ColoredNode) = nil .
	eq references (ColoredNode) = color@ColoredNode in@ColoredNode out@ColoredNode .
	eq attributes (ColoredNode) = nil . 
	eq operations (ColoredNode) = setColor@ColoredNode getColor@ColoredNode .

	op color@ColoredNode : -> @Reference .
	eq name (color@ColoredNode) = "color" .
	eq opposite (color@ColoredNode) = null .
	eq type (color@ColoredNode) = Color .
	eq lowerBound (color@ColoredNode) = 0 .
	eq upperBound (color@ColoredNode) = 1 .
	eq containingClass (color@ColoredNode) = ColoredNode .
	eq isOrdered (color@ColoredNode) = false .
	eq isUnique (color@ColoredNode) = false .
	eq isContainment (color@ColoredNode) = false .

	
	sort setColor@ColoredNode .
	subsort setColor@ColoredNode < @Operation .
	op setColor@ColoredNode : -> setColor@ColoredNode . 
	eq name(setColor@ColoredNode) = "setColor" .
	eq isAbstract(setColor@ColoredNode) = false .
	eq from(setColor@ColoredNode) = null .
	eq type(setColor@ColoredNode) = null .
	eq lowerBound(setColor@ColoredNode) = 1 .
	eq upperBound(setColor@ColoredNode) = 1 .
	eq isOrdered(setColor@ColoredNode) = false .
	eq isUnique(setColor@ColoredNode) = false .
	eq containingClass (setColor@ColoredNode) = ColoredNode .
	eq parameters(setColor@ColoredNode) = newColor@setColor@ColoredNode .

	sort newColor@setColor@ColoredNode .
	subsort newColor@setColor@ColoredNode < @Parameter .
	op newColor@setColor@ColoredNode : -> newColor@setColor@ColoredNode .
	eq name(newColor@setColor@ColoredNode) = "newColor" .
	eq type(newColor@setColor@ColoredNode) = Color .
	eq lowerBound(newColor@setColor@ColoredNode) = 1 .
	eq upperBound(newColor@setColor@ColoredNode) = 1 .
	eq isOrdered(newColor@setColor@ColoredNode) = true .
	eq isUnique(newColor@setColor@ColoredNode) = true .


	sort getColor@ColoredNode .
	subsort getColor@ColoredNode < @Operation .
	op getColor@ColoredNode : -> getColor@ColoredNode . 
	eq name(getColor@ColoredNode) = "getColor" .
	eq isAbstract(getColor@ColoredNode) = false .
	eq from(getColor@ColoredNode) = null .
	eq type(getColor@ColoredNode) = Color .
	eq lowerBound(getColor@ColoredNode) = 1 .
	eq upperBound(getColor@ColoredNode) = 1 .
	eq isOrdered(getColor@ColoredNode) = false .
	eq isUnique(getColor@ColoredNode) = false .
	eq containingClass (getColor@ColoredNode) = ColoredNode .
	eq parameters(getColor@ColoredNode) = nil .
	
	op in@ColoredNode : -> @Reference .
	eq name (in@ColoredNode) = "in" .
	eq opposite (in@ColoredNode) = target@Edge .
	eq type (in@ColoredNode) = Edge .
	eq lowerBound (in@ColoredNode) = 0 .
	eq upperBound (in@ColoredNode) = * .
	eq containingClass (in@ColoredNode) = ColoredNode .
	eq isOrdered (in@ColoredNode) = false .
	eq isUnique (in@ColoredNode) = true .
	eq isContainment (in@ColoredNode) = false .
	
	op out@ColoredNode : -> @Reference .
	eq name (out@ColoredNode) = "out" .
	eq opposite (out@ColoredNode) = source@Edge .
	eq type (out@ColoredNode) = Edge .
	eq lowerBound (out@ColoredNode) = 0 .
	eq upperBound (out@ColoredNode) = * .
	eq containingClass (out@ColoredNode) = ColoredNode .
	eq isOrdered (out@ColoredNode) = false .
	eq isUnique (out@ColoredNode) = true .
	eq isContainment (out@ColoredNode) = false .
	
	--- Color
	
	sort Color .
	subsort Color < @Class .
	op Color : -> Color .
	eq name(Color) = "Color" .
	eq isAbstract(ColoredNode) = false .
	eq package(Color) = ColoredGraphPkg' .
	eq superTypes (Color) = nil .
	eq references (Color) = nil .
	eq attributes (Color) = name@Color . 
	eq operations(Color) = nil . 
	
	op name@Color  : -> @Attribute .
  	eq name (name@Color) = "name" .
  	eq type (name@Color) = @String .
  	eq lowerBound (name@Color) = 1 .
  	eq upperBound (name@Color) = 1 .
  	eq containingClass (name@Color) = Color .
  	eq isOrdered (name@Color) = true .
  	eq isUnique (name@Color) = true .
  	eq isId (name@Color) = true .
  	
 
 	--- Edge
	
	sort Edge .
	subsort Edge < @Class .
	op Edge : -> Edge .
	eq name(Edge) = "Edge" .
	eq isAbstract(Edge) = false .
	eq package(Edge) = ColoredGraphPkg' .
	eq superTypes (Edge) = nil .
	eq references (Edge) = source@Edge target@Edge .
	eq attributes (Edge) = nil . 
	eq operations(Edge) = nil .
  	
	op source@Edge : -> @Reference .
	eq name (source@Edge) = "source" .
	eq opposite (source@Edge) = out@ColoredNode .
	eq type (source@Edge) = ColoredNode .
	eq lowerBound (source@Edge) = 1 .
	eq upperBound (source@Edge) = 1 .
	eq containingClass (source@Edge) = Edge .
	eq isOrdered (source@Edge) = false .
	eq isUnique (source@Edge) = true .
	eq isContainment (source@Edge) = false .
  	
	op target@Edge : -> @Reference .
	eq name (target@Edge) = "target" .
	eq opposite (target@Edge) = in@ColoredNode .
	eq type (target@Edge) = ColoredNode .
	eq lowerBound (target@Edge) = 1 .
	eq upperBound (target@Edge) = 1 .
	eq containingClass (target@Edge) = Edge .
	eq isOrdered (target@Edge) = false .
	eq isUnique (target@Edge) = true .
	eq isContainment (target@Edge) = false .
  	
  	
  	
  	
  	
  	
  	
	--- Metamodel declaration	  
	op ColoredGraphMT' : -> @Metamodel .
	eq name(ColoredGraphMT') = "RGBColoredGraphMT" .
	eq packages (ColoredGraphMT') = ColoredGraphPkg' .

	--- Package declaration
	op ColoredGraphPkg' : -> @Package .
	eq name(ColoredGraphPkg') = "ColoredGraph" .
	eq metamodel(ColoredGraphPkg') = ColoredGraphMT' .
	eq superPackage(ColoredGraphPkg') = null .
	eq subPackages(ColoredGraphPkg') = nil .
	eq classes(ColoredGraphPkg') = __(ColoredGraph', Edge', ColoredNode', Color') .

	*** Classes ***
	
	--- ColoredGraph'
	
	sort ColoredGraph' .
	subsort ColoredGraph' < @Class .
	op ColoredGraph' : -> ColoredNode' .
	eq name(ColoredGraph') = "ColoredGraph" .
	eq isAbstract(ColoredGraph') = false .
	eq package(ColoredGraph') = ColoredGraphPkg' .
	eq superTypes (ColoredGraph') = nil .
	eq references (ColoredGraph') = edges@ColoredGraph' source@Edge' .
	eq attributes (ColoredGraph') = nil . 
	eq operations (ColoredGraph') = nil .
	
	op nodes@Edge' : -> @Reference .
	eq name (nodes@Edge') = "nodes" .
	eq opposite (nodes@Edge') = null .
	eq type (nodes@Edge') = ColoredNode' .
	eq lowerBound (nodes@Edge') = 0 .
	eq upperBound (nodes@Edge') = * .
	eq containingClass (nodes@Edge') = ColoredGraph .
	eq isOrdered (nodes@Edge') = false .
	eq isUnique (nodes@Edge') = true .
	eq isContainment (nodes@Edge') = true .
	
	op edges@ColoredGraph : -> @Reference .
	eq name (edges@ColoredGraph) = "edges" .
	eq opposite (edges@ColoredGraph) = null .
	eq type (edges@ColoredGraph) = Edge' .
	eq lowerBound (edges@ColoredGraph) = 0 .
	eq upperBound (edges@ColoredGraph) = * .
	eq containingClass (edges@ColoredGraph) = ColoredGraph .
	eq isOrdered (edges@ColoredGraph) = false .
	eq isUnique (edges@ColoredGraph) = true .
	eq isContainment (edges@ColoredGraph) = true .
	
	
	--- ColoredNode'
	
	sort ColoredNode' .
	subsort ColoredNode' < @Class .
	op ColoredNode' : -> ColoredNode' .
	eq name(ColoredNode') = "ColoredNode" .
	eq isAbstract(ColoredNode') = false .
	eq package(ColoredNode') = ColoredGraphPkg' .
	eq superTypes (ColoredNode') = nil .
	eq references (ColoredNode') = color@ColoredNode' in@ColoredNode' out@ColoredNode' .
	eq attributes (ColoredNode') = nil . 
	eq operations (ColoredNode') = setColor@ColoredNode' getColor@ColoredNode' getName@ColoredNode' setName@ColoredNode' .

	op color@ColoredNode' : -> @Reference .
	eq name (color@ColoredNode') = "color" .
	eq opposite (color@ColoredNode') = null .
	eq type (color@ColoredNode') = Color' .
	eq lowerBound (color@ColoredNode') = 0 .
	eq upperBound (color@ColoredNode') = 1 .
	eq containingClass (color@ColoredNode') = ColoredNode' .
	eq isOrdered (color@ColoredNode') = false .
	eq isUnique (color@ColoredNode') = false .
	eq isContainment (color@ColoredNode') = false .

	
	sort setColor@ColoredNode' .
	subsort setColor@ColoredNode' < @Operation .
	op setColor@ColoredNode' : -> setColor@ColoredNode' . 
	eq name(setColor@ColoredNode') = "setColor" .
	eq isAbstract(setColor@ColoredNode') = false .
	eq from(setColor@ColoredNode') = null .
	eq type(setColor@ColoredNode') = null .
	eq lowerBound(setColor@ColoredNode') = 1 .
	eq upperBound(setColor@ColoredNode') = 1 .
	eq isOrdered(setColor@ColoredNode') = false .
	eq isUnique(setColor@ColoredNode') = false .
	eq containingClass (setColor@ColoredNode') = ColoredNode' .
	eq parameters(setColor@ColoredNode') = newColor@setColor@ColoredNode' .

	sort newColor@setColor@ColoredNode' .
	subsort newColor@setColor@ColoredNode' < @Parameter .
	op newColor@setColor@ColoredNode' : -> newColor@setColor@ColoredNode' .
	eq name(newColor@setColor@ColoredNode') = "newColor" .
	eq type(newColor@setColor@ColoredNode') = Color .
	eq lowerBound(newColor@setColor@ColoredNode') = 1 .
	eq upperBound(newColor@setColor@ColoredNode') = 1 .
	eq isOrdered(newColor@setColor@ColoredNode') = true .
	eq isUnique(newColor@setColor@ColoredNode') = true .


	sort getColor@ColoredNode' .
	subsort getColor@ColoredNode' < @Operation .
	op getColor@ColoredNode' : -> getColor@ColoredNode' . 
	eq name(getColor@ColoredNode') = "getColor" .
	eq isAbstract(getColor@ColoredNode') = false .
	eq from(getColor@ColoredNode') = null .
	eq type(getColor@ColoredNode') = Color .
	eq lowerBound(getColor@ColoredNode') = 1 .
	eq upperBound(getColor@ColoredNode') = 1 .
	eq isOrdered(getColor@ColoredNode') = false .
	eq isUnique(getColor@ColoredNode') = false .
	eq containingClass (getColor@ColoredNode') = ColoredNode' .
	eq parameters(getColor@ColoredNode') = nil .
	
	op in@ColoredNode' : -> @Reference .
	eq name (in@ColoredNode') = "in" .
	eq opposite (in@ColoredNode') = target@Edge' .
	eq type (in@ColoredNode') = Edge' .
	eq lowerBound (in@ColoredNode') = 0 .
	eq upperBound (in@ColoredNode') = * .
	eq containingClass (in@ColoredNode') = ColoredNode' .
	eq isOrdered (in@ColoredNode') = false .
	eq isUnique (in@ColoredNode') = true .
	eq isContainment (in@ColoredNode') = false .
	
	op out@ColoredNode' : -> @Reference .
	eq name (out@ColoredNode') = "out" .
	eq opposite (out@ColoredNode') = source@Edge' .
	eq type (out@ColoredNode') = Edge' .
	eq lowerBound (out@ColoredNode') = 0 .
	eq upperBound (out@ColoredNode') = * .
	eq containingClass (out@ColoredNode') = ColoredNode' .
	eq isOrdered (out@ColoredNode') = false .
	eq isUnique (out@ColoredNode') = true .
	eq isContainment (out@ColoredNode') = false .

	sort getName@ColoredNode' .
	subsort getName@ColoredNode' < @Operation .
	op getName@ColoredNode' : -> getName@ColoredNode' . 
	eq name(getName@ColoredNode') = "getName" .
	eq isAbstract(getName@ColoredNode') = false .
	eq from(getName@ColoredNode') = null .
	eq type(getName@ColoredNode') = Color .
	eq lowerBound(getName@ColoredNode') = 1 .
	eq upperBound(getName@ColoredNode') = 1 .
	eq isOrdered(getName@ColoredNode') = false .
	eq isUnique(getName@ColoredNode') = false .
	eq containingClass (getName@ColoredNode') = ColoredNode' .
	eq parameters(getName@ColoredNode') = nil .

	sort setName@ColoredNode' .
	subsort setName@ColoredNode' < @Operation .
	op setName@ColoredNode' : -> setName@ColoredNode' . 
	eq name(setName@ColoredNode') = "setName" .
	eq isAbstract(setName@ColoredNode') = false .
	eq from(setName@ColoredNode') = null .
	eq type(setName@ColoredNode') = null .
	eq lowerBound(setName@ColoredNode') = 1 .
	eq upperBound(setName@ColoredNode') = 1 .
	eq isOrdered(setName@ColoredNode') = false .
	eq isUnique(setName@ColoredNode') = false .
	eq containingClass (setName@ColoredNode') = ColoredNode' .
	eq parameters(setName@ColoredNode') = newName@setName@ColoredNode' .

	sort newName@setName@ColoredNode' .
	subsort newName@setName@ColoredNode' < @Parameter .
	op newName@setName@ColoredNode' : -> newName@setName@ColoredNode' .
	eq name(newName@setName@ColoredNode') = "newName" .
	eq type(newName@setName@ColoredNode') = Color .
	eq lowerBound(newName@setName@ColoredNode') = 1 .
	eq upperBound(newName@setName@ColoredNode') = 1 .
	eq isOrdered(newName@setName@ColoredNode') = true .
	eq isUnique(newName@setName@ColoredNode') = true .
	
		
	--- Color
	
	sort Color' .
	subsort Color' < @Class .
	op Color' : -> Color' .
	eq name(Color') = "Color" .
	eq isAbstract(ColoredNode') = false .
	eq package(Color') = ColoredGraphPkg' .
	eq superTypes (Color') = nil .
	eq references (Color') = nil .
	eq attributes (Color') = name@Color' . 
	eq operations(Color') = nil . 
	
	op name@Color'  : -> @Attribute .
  	eq name (name@Color') = "name" .
  	eq type (name@Color') = @String .
  	eq lowerBound (name@Color') = 1 .
  	eq upperBound (name@Color') = 1 .
  	eq containingClass (name@Color') = Color' .
  	eq isOrdered (name@Color') = true .
  	eq isUnique (name@Color') = true .
  	eq isId (name@Color') = true .
  	
 
 	--- Edge'
	
	sort Edge' .
	subsort Edge' < @Class .
	op Edge' : -> Edge' .
	eq name(Edge') = "Edge" .
	eq isAbstract(Edge') = false .
	eq package(Edge') = ColoredGraphPkg' .
	eq superTypes (Edge') = nil .
	eq references (Edge') = source@Edge' target@Edge' .
	eq attributes (Edge') = nil . 
	eq operations(Edge') = nil .
  	
	op source@Edge' : -> @Reference .
	eq name (source@Edge') = "source" .
	eq opposite (source@Edge') = out@ColoredNode' .
	eq type (source@Edge') = ColoredNode' .
	eq lowerBound (source@Edge') = 1 .
	eq upperBound (source@Edge') = 1 .
	eq containingClass (source@Edge') = Edge' .
	eq isOrdered (source@Edge') = false .
	eq isUnique (source@Edge') = true .
	eq isContainment (source@Edge') = false .
  	
	op target@Edge' : -> @Reference .
	eq name (target@Edge') = "target" .
	eq opposite (target@Edge') = in@ColoredNode' .
	eq type (target@Edge') = ColoredNode' .
	eq lowerBound (target@Edge') = 1 .
	eq upperBound (target@Edge') = 1 .
	eq containingClass (target@Edge') = Edge' .
	eq isOrdered (target@Edge') = false .
	eq isUnique (target@Edge') = true .
	eq isContainment (target@Edge') = false .
  		
endm 