cd /cygdrive/f/Workspace/Maude/KMV/
load syntax/model-checker.maude 
load syntax/mmOdCL.maude
load syntax/MMGDefinitions.maude


view @Class from TRIV to METAMODEL-CTORS is
  sort Elt to @Class .
endv

mod KERMETA-STMT-PREP is
	sort @Statement .
endm

mod KERMETA-SL-CTORS is
	pr METAMODEL-PROP .
	pr MGLIST{@NamedElement} * (sort MGList{@NamedElement} to MyList) .

	pr MGMAYBE{@Class} . 

	--- Operation & Parameters signature
	sort @Operation @Parameter @Variable @LocalVariable .
	subsort @Variable @Parameter < @LocalVariable < Vid .
	subsort @Operation @Parameter @LocalVariable < @StructuralFeature .
	op self : -> @LocalVariable .
	op KRESULT : -> @LocalVariable .
	op operations : @Class -> MyList . --- of @Operation
	op isAbstract : @Operation -> Bool .
	op from : @StructuralFeature -> Maybe{@Class} .
	op containingOperation : @Parameter -> @Operation .
	op containingOperation : @Variable  -> @Operation .
   	op parameters : @Operation -> MyList . --- of @Parameter
	op variables : @Operation -> MyList .  --- of @Variable
					
	--- Label
	sort @Label @LabelNxt .
	op [_,_,_,_] : @Package @Class @Operation Nat -> @Label [ctor] .
	--- default label
	op [] : -> @Label .
	op <_,_> : @Label @Label -> @LabelNxt [ctor] .
	op nxt : @Label -> @LabelNxt .
	op labels : @Operation -> MyList . --- of @Label
	
	var LV : @LocalVariable .
	op defaultValue : @LocalVariable -> OCL-Type .
	eq defaultValue(LV) = 
		if isMany(LV) then
			if isOrdered(LV) then
				if isUnique(LV) then
					OrderedSet{}
				else
					Sequence{}
				fi
			else
				if isUnique(LV) then
					Set{}
				else
					Bag{}
				fi
			fi
		else 
			if type(LV) :: @DataType then
				defaultValue(type(LV))
			else
				null
			fi
		fi .
endm

view @Label from TRIV to KERMETA-SL-CTORS is
  	sort Elt to @Label .
endv

view @Statement from TRIV to KERMETA-STMT-PREP is
 	sort Elt to @Statement .
endv

view @Operation from TRIV to KERMETA-SL-CTORS is
 	sort Elt to @Operation .
endv

view @LocalVariable from TRIV to KERMETA-SL-CTORS is
	sort Elt to @LocalVariable .	
endv

view OCL-Type from TRIV to MGmOdCL is
    sort Elt to OCL-Type .
endv

mod KERMETA-STATEMENTS-MAP is
	pr MAP{@Label, @Statement} .
	pr MAP{@LocalVariable, OCL-Type} .
endm

mod KERMETA-SL is
	pr KERMETA-SL-CTORS .
	pr KERMETA-STATEMENTS-MAP .
	op statements : @Metamodel -> Map{@Label, @Statement} .
endm

--- ------------------------------------------------------------------------------------
--- Action Language Syntax
--- 
--- Body ::= [Stm]+
--- Stm  ::= lab: Stmt
--- Stmt ::= condStmt 
---       |  assignStmt | castStmt
---       |  instanceCreationStmt 
---       |  collStmt
---       |  returnStmt | callStmt 
--- CondStmt             ::= <if> exp
--- AssignStmt           ::= lhs := exp
--- InstanceCreationStmt ::= var := exp
--- ReturnStmt           ::= <return> | <return> exp
--- CallStmt             ::= call | var := call
--- Call                 ::= target.op(exp*)
--- ------------------------------------------------------------------------------------
mod KERMETA-AL is
	pr KERMETA-STMT-PREP .
	pr KERMETA-SL .
    pr METAMODEL-PROP .
    pr MGMAYBE{@Operation} .
                
	sort    @CondStmt @AssignStmt @InstanceCreationStmt @Call @CallStmt @ReturnStmt .
	subsort @Call < @CallStmt .
	subsort @CondStmt @AssignStmt @InstanceCreationStmt @CallStmt @ReturnStmt < @Statement .
	sort    @CollItem .
	
	ops bag
		set
		seq
		oset : -> @CollItem .
	op iff_      : OCL-Exp -> @CondStmt [ctor] .
   	op _.:=._      : OCL-Exp OCL-Exp -> @AssignStmt [ctor] .
   	op _.:=. new`(_`) : @Variable @Classifier -> @InstanceCreationStmt [ctor] .
   	op _.:=. new`(_,_`) : @Variable @CollItem @Classifier -> @InstanceCreationStmt [ctor] .
   	op return    : -> @ReturnStmt [ctor] .
   	op return_   : OCL-Exp -> @ReturnStmt [ctor] .
   	op _._<>   : OCL-Exp String -> @Call [ctor ] .
   	op _._<_>   : OCL-Exp String List{OCL-Exp} -> @Call [ctor] .
   	op _.:=._    : OCL-Exp @Call -> @CallStmt [ctor] .
   	
   	var CLASSIFIER : @Classifier .
   	op default(_,_) :  @CollItem @Classifier -> OCL-Exp .
   	eq default(bag,  CLASSIFIER) = Bag{} .
   	eq default(set,  CLASSIFIER) = Set{} .
   	eq default(seq,  CLASSIFIER) = Sequence{} .
   	eq default(oset, CLASSIFIER) = OrderedSet{} .
   	
   	var ON : String .
   	var C  : @Class .
   	var O : @Operation .
   	var L VALLIST PARAMLIST : MyList .
   	var LV VAL PARAM : @LocalVariable .
   	vars VPAIRS VPAIRSS VPSET : Set{VarPair} .
   	var VPELT : VarPair .
   	var LEXP : List{OCL-Exp} .
   	var EXP  : OCL-Exp .
   	
   	op createLocalEnv : @Operation -> Set{VarPair} .
   	eq createLocalEnv(O) = createLocalEnv$(variables(O)) .
   	
   	op createLocalEnv : @Operation List{OCL-Exp} -> Set{VarPair} .
   	eq createLocalEnv(O, LEXP) = createParamBindings(parameters(O), LEXP) # createLocalEnv$(variables(O)) .
   	
   	op createLocalEnv$ : MyList -> Set{VarPair} . --- of @Variable
   	eq createLocalEnv$(nil) = empty .
   	eq createLocalEnv$(LV L) = putVar(LV <- defaultValue(LV), createLocalEnv$(L)) .
   	
   	op createParamBindings : MyList List{OCL-Exp} -> Set{VarPair} .
   	eq createParamBindings(nil, mt-ord) = empty .
   	eq createParamBindings(LV L, EXP # LEXP) = putVar(LV <- EXP, createParamBindings(L, LEXP)) .
   	
   	
   	op lookup : String @Class -> @Operation .
   	eq lookup(ON , C) = 
   		if(not ( getByName(ON , C) == null )) then
   			getByName(ON , C)
   		else 
   			findByName(ON , allSuperTypes(C) )
   		fi
   	.
   	
   	op findByName : String MyList -> @Operation . --- of @Class
   	eq findByName(ON , C) = getByName(ON , C) .
 	eq findByName(ON , C L) = 
 		if(not (getByName(ON , C) == null)) then
 	 		getByName(ON , C)
 	 	else
 	 		findByName(ON , L)
 	 	fi
 	 .
   	
   	op getByName : String @Class -> Maybe{@Operation} . 
   	eq getByName(ON , C) = getByName$(ON , operations(C)) .
   	 
   	op getByName$ : String MyList -> Maybe{@Operation} . --- of @Operation
   	eq getByName$(ON , nil) = null .
   	eq getByName$(ON , O L) = 
   		if (ON == name(O)) then
   			O
   		else
   			getByName$(ON , L)
   		fi 
   	.
   	
endm



mod KERMETA-DOMAIN is
	pr MGmOdCL .
	pr METAMODEL-PROP .
	pr KERMETA-SL-CTORS .
	---pr MAP{@LocalVariable, OclType} .
	sort Domain .
	op <_##_> : @Model Set{VarPair} -> Domain [ctor] .
		
endm

mod KERMETA-STACK is
	pr KERMETA-SL .
	pr KERMETA-STATEMENTS-MAP .
	pr MGMAYBE{@LocalVariable} .	
	
	sort StackEntry .
	op `(|_,_,_|`) : @Label Set{VarPair} Maybe{@LocalVariable} -> StackEntry .
endm

fmod STACK{X :: TRIV} is
	protecting BOOL .

	sorts NeStack{X} Stack{X} .
	subsort X$Elt  < NeStack{X} < Stack{X} .

	op NOPE : -> Stack{X} [ctor] .
	op _!!!_ : X$Elt Stack{X} -> NeStack{X} [ctor right id: NOPE] .

	var E : X$Elt .
	var S : Stack{X} .
---	eq (E !!! NOPE)  = E .
	
	op isEmpty_ : Stack{X} -> Bool .
	eq isEmpty(NOPE) = true .
	eq isEmpty(S)    = false [owise] .
	
endfm



view StackEntry from TRIV to KERMETA-STACK is
	sort Elt to StackEntry .
endv

mod KERMETA-CONFIGURATION is
	pr KERMETA-SL .
	pr STACK{StackEntry} .
	pr KERMETA-DOMAIN .
	
	sort KConfig .
	op <|_,_,_,_|> : @Label Stack{StackEntry} Domain Nat -> KConfig .
	
	var LAB : @Label .
	var S : Stack{StackEntry} .
	var N : Nat .
	var D : Domain .
	
	op isStop : KConfig -> Bool .
	eq isStop(<| [], NOPE, D, N |>) = true .
	eq isStop(<| LAB, S, D, N |>) = false [owise] .
endm

mod KERMETA is

	pr KERMETA-AL .
	pr KERMETA-CONFIGURATION .
	
	--- Create a "fresh" Oid (i.e. not present in a model's config)
	--- Intended to be called with the "N" param in the config
	op newOid : Nat -> Oid .
	var N : Nat .
	eq newOid(N) = qid("O" + string(N, 10)) .

	--- update(M, O, REF, EXP) updates object O in model M
	--- with value EXP, preserving reference integrity 
	op update : @Model Oid @Reference OCL-Exp -> @Model .
	
	vars MM : @Metamodel .
	vars O O' X Y : Oid .
	var SFIS SFISO SFISO' SFISX SFISY : Set{@StructuralFeatureInstance} .
	var CLASSO CLASSO' CLASSX CLASSY : @Class .
	vars P Q : @Reference .
	var OBJSET : Set{@Object} .
	var VALO' VALX VALY : OCL-Exp .

	ceq update(MM{< O : CLASSO | P : X # SFISO > OBJSET}, O, REF, O') = 
			MM{< O : CLASSO | P : O' # SFISO > OBJSET} 
		if not(isMany(REF)) /\ null = opposite(REF) .
	
	ceq update(MM{< O : CLASSO | P : X    # SFISO > 
				  < Y : CLASSY | P : O'   # SFISY > 
				  < X : CLASSX | Q : VALX # SFISX > OBJSET}, O, REF, O') = 
		MM{ < O : CLASSO | P : O'   # SFISO > 
			< Y : CLASSY | P : null # SFISY >
			< X : CLASSX | Q : null # SFISX > OBJSET} 
		if not(isMany(P)) /\ not(isContainment(P)) /\ Q := opposite(P) .

	ceq update(MM{< O  : CLASSO  | P : X     # SFISO  > 
				  < O' : CLASSO' | Q : VALO' # SFISO' > 
				  < Y  : CLASSY  | P : O'    # SFISY  > 
				  < X  : CLASSX  | Q : VALX  # SFISX  > OBJSET}, O, REF, O') = 
		MM{ < O  : CLASSO  | P : O'   # SFISO  > 
			< O' : CLASSO' | Q : O    # SFISO  > 
			< Y  : CLASSY  | P : null # SFISO' >
			< X  : CLASSX  | Q : null # SFISX  > OBJSET} 
		if not(isMany(P)) /\ isContainment(P) /\ Q := opposite(P) .

	ceq update(MM{< O : CLASSO | P : X    # SFISO > 
				  < Y : CLASSY | P : O'   # SFISY > 
				  < X : CLASSX | Q : VALX # SFISX > OBJSET}, O, REF, O') = 
		MM{ < O : CLASSO | P : O'   # SFISO > 
			< Y : CLASSY | P : null # SFISY >
			< X : CLASSX | Q : null # SFISX > OBJSET} 
		if not(isMany(P)) /\ isContainer(P) /\ Q := opposite(P) .



	
	vars LAB LABNxt LABELSE LABTHEN LABNULL : @Label .
	vars VPSET VPSETT : Set{VarPair} .
	vars S : Stack{StackEntry} .
	vars M MP : @Model .

	vars E RES INST OLD EXP : OCL-Exp .
	var OID : Oid .
	vars VAR  MYVAR : @Variable .
	var MAYBEVAR : Maybe{@LocalVariable} .
	var CLASS : @Class .
	var CLASSIFIER : @Classifier .
	var SE : StackEntry .
	var COLLITEM : @CollItem .
	var OPNAME : String .
	var OP : @Operation . 
	var LO LEXP : List{OCL-Exp} .
	var K : KConfig .
	var ATT : @Attribute .
	var REF : @Reference .
	
	op run : KConfig -> KConfig .
	eq run(K) = if isStop(K) then K else run(exec(K)) fi .
	
		
	
	
	op exec : KConfig -> KConfig [iter] .
	
	--- CondStmt
	ceq exec( <| LAB, S, < M ## VPSET >, N |> ) = <| LABTHEN, S, < M ## VPSET >, N |> 
		if  iff( E ) := statements( meta(M) ) [ LAB ] /\ 
			< LABTHEN , LABELSE > := nxt(LAB)         /\ 
			true = << E ; env(VPSET) ; M >> 	
	.
	ceq exec(<| LAB, S, < M ## VPSET >, N |>) = <| LABELSE, S, < M ## VPSET >, N |> 
		if  iff( E ) := statements( meta(M) ) [ LAB ] /\ 
			< LABTHEN , LABELSE > := nxt(LAB) 		  /\ 
			false = << E ; env(VPSET) ; M >> 
	.

	--- ReturnStmt
	ceq exec(<| LAB,   (| LABNxt , VPSETT, null |) !!! S, < M ## VPSET >,  N |>) = 
			 <| LABNxt,                                S, < M ## VPSETT >, N |> 
		if return :=  statements( meta(M) ) [ LAB ]
	.
	ceq exec(<| LAB, (| LABNxt , VPSETT, MYVAR |) !!! S, < M ## VPSET >,  N |>) = 
			 <| LABNxt,                               S, < M ## putVar( MYVAR <- RES , VPSETT) >, N |> 
		if  return( E ) :=  statements( meta(M) ) [ LAB ] /\
			RES := << E ; env(VPSET) ; M >>
	.
	ceq exec(<| LAB, NOPE, < M ## VPSET >,  N |>) = 
			 <| [] , NOPE, < M ## VPSET >, N |> 
		if return :=  statements( meta(M) ) [ LAB ]
	.
	ceq exec(<| LAB, NOPE, < M ## VPSET >,  N |>) = 
			 <| [] , NOPE, < M ## putVar( KRESULT <- RES , VPSET) >, N |> 
		if  return( E ) :=  statements( meta(M) ) [ LAB ] /\
			RES := << E ; env(VPSET) ; M >>
	.

	
	--- NewInstStmt: depends on the object's type created
	ceq exec(<| LAB,    S, < MM { OBJSET } ## VPSET >, N |>) = 
			 <| LABNxt, S, < MM { complete(< newOid(N) : CLASSIFIER | empty >) OBJSET } ## (putVar(MYVAR <- newOid(N), VPSET)) >, (N + 1) |>
			if  MYVAR .:=. new ( CLASSIFIER ) := statements( MM ) [ LAB ] /\ 
			< LABNxt , LABNULL > := nxt(LAB)  							  /\
			CLASSIFIER :: @Class 
	.
	ceq exec(<| LAB,    S, < MM { OBJSET } ## VPSET >, N |>) = 
			 <| LABNxt, S, < MM { OBJSET } ## (putVar(MYVAR <- defaultValue(CLASSIFIER), VPSET)) >, N |>
			if  MYVAR .:=. new ( CLASSIFIER ) := statements( MM ) [ LAB ] /\  
			< LABNxt , LABNULL > := nxt(LAB) /\
			CLASSIFIER :: @DataType
	.
	
	ceq exec(<| LAB, S, < MM { OBJSET } ## VPSET >, N |>) = <| LABNxt, S, < MM { OBJSET } ## (putVar(MYVAR <- default(COLLITEM , CLASSIFIER), VPSET)) >, N |>
			if  MYVAR .:=. new ( COLLITEM , CLASSIFIER ) := statements( MM ) [ LAB ] /\ 
			< LABNxt , LABNULL > := nxt(LAB)
	.
	
	
	
	--- CallStmt
	ceq exec(<| LAB, S, < MM { < OID : CLASS | SFIS > OBJSET } ## VPSET >, N |>) = 
			 <| [ package(containingClass(OP)) , containingClass(OP) , OP , 1 ] , (| LABNxt , VPSET, null |) !!! S, < MM { < OID : CLASS | SFIS > OBJSET } ## (putVar(self <- OID, createLocalEnv(OP))) >, N |>
		if INST . OPNAME <> := statements( MM ) [ LAB ] /\
		< LABNxt , LABNULL > := nxt(LAB) /\
		OID := << INST ; env(VPSET) ; MM { < OID : CLASS | SFIS > OBJSET } >> /\ OID :: Oid /\
		OP := lookup(OPNAME, CLASS) 
	. --- Having O : CLASS in the to-be-rewritten KConfig causes Maude trying to match ALL
	--- objects in the model before giving up
	ceq exec(<| LAB, S, < MM { < OID : CLASS | SFIS > OBJSET } ## VPSET >, N |>) = 
			 <| [ package(containingClass(OP)) , containingClass(OP) , OP , 1 ] , (| LABNxt , VPSET, null |) !!! S, < MM { < OID : CLASS | SFIS > OBJSET } ## (putVar(self <- OID, createLocalEnv(OP, LEXP))) >, N |>
		if INST . OPNAME < LO > := statements( MM ) [ LAB ] /\
		< LABNxt , LABNULL > := nxt(LAB) /\
		LEXP := eval-EL(LO, env(VPSET), none) /\
		OID := << INST ; env(VPSET) ; MM { < OID : CLASS | SFIS > OBJSET } >> /\ OID :: Oid /\
		OP := lookup(OPNAME, CLASS) 
	.
	ceq exec(<| LAB, S, < MM { < OID : CLASS | SFIS > OBJSET } ## VPSET >, N |>) = 
			 <| [ package(containingClass(OP)) , containingClass(OP) , OP , 1 ] , (| LABNxt , VPSET, MYVAR |) !!! S, < MM { < OID : CLASS | SFIS > OBJSET } ## (putVar(self <- OID, createLocalEnv(OP))) >, N |>
		if MYVAR .:=. INST . OPNAME <> := statements( MM ) [ LAB ] /\
		< LABNxt , LABNULL > := nxt(LAB) /\
		OID := << INST ; env(VPSET) ; MM { < OID : CLASS | SFIS > OBJSET } >> /\ OID :: Oid /\
		OP := lookup(OPNAME, CLASS) 
	. --- Having O : CLASS in the to-be-rewritten KConfig causes Maude trying to match ALL
	--- objects in the model before giving up
	ceq exec(<| LAB, S, < MM { < OID : CLASS | SFIS > OBJSET } ## VPSET >, N |>) = 
			 <| [ package(containingClass(OP)) , containingClass(OP) , OP , 1 ] , (| LABNxt , VPSET, MYVAR |) !!! S, < MM { < OID : CLASS | SFIS > OBJSET } ## (putVar(self <- OID, createLocalEnv(OP, LEXP))) >, N |>
		if MYVAR .:=. INST . OPNAME < LO > := statements( MM ) [ LAB ] /\
		< LABNxt , LABNULL > := nxt(LAB) /\
		LEXP := eval-EL(LO, env(VPSET), none) /\
		OID := << INST ; env(VPSET) ; MM { < OID : CLASS | SFIS > OBJSET } >> /\ OID :: Oid /\
		OP := lookup(OPNAME, CLASS) 
	.
	
	--- AssignStmt
	ceq exec(<| LAB,    S, < MM { OBJSET } ## ((MYVAR <- OLD) # VPSET) >,      N |>) = 
			 <| LABNxt, S, < MM { OBJSET } ## (putVar(MYVAR <- RES, VPSET)) >, N |>
			if  MYVAR .:=. E := statements( MM ) [ LAB ] /\ 
				< LABNxt , LABNULL > := nxt(LAB) /\ 
				RES := << E ; env((MYVAR <- OLD) # VPSET) ; MM { OBJSET } >>		
	.
	ceq exec(<| LAB,    S, < MM { < O : CLASS | ATT : OLD # SFIS > OBJSET } ## VPSET >, N |>) = 
			 <| LABNxt, S, < MM { < O : CLASS | ATT : RES # SFIS > OBJSET } ## VPSET >, N |>
			if  INST . ATT .:=. E := statements( MM ) [ LAB ] /\ 
				< LABNxt , LABNULL > := nxt(LAB) /\ 
				O   := << INST ; env(VPSET) ; MM { < O : CLASS | ATT : OLD # SFIS > OBJSET } >> /\ 
				O   :: Oid /\
				RES := << E    ; env(VPSET) ; MM { < O : CLASS | ATT : OLD # SFIS > OBJSET } >>		
	.
	ceq exec(<| LAB,    S, < MM { < O : CLASS | REF : OLD # SFIS > OBJSET } ## VPSET >, N |>) = 
			 <| LABNxt, S, < update(MM { < O : CLASS | REF : RES # SFIS > OBJSET }, O, REF, RES) ## VPSET >, N |>
			if  INST . REF .:=. E := statements( MM ) [ LAB ] /\ 
				< LABNxt , LABNULL > := nxt(LAB) /\ 
				O   := << INST ; env(VPSET) ; MM { < O : CLASS | REF : OLD # SFIS > OBJSET } >> /\ 
				O   :: Oid /\ --- not(isMany(REF)) /\ opposite(REF) == null /\
				RES := << E ; env(VPSET) ; MM { < O : CLASS | REF : OLD # SFIS > OBJSET } >>		
	.
---	ceq exec(<| LAB, S, < MM { < O : CLASS | REF : OLD # SFIS > OBJSET } ## VPSET >, N |>) = <| LABNxt, S, < MM { < O : CLASS | REF : RES # SFIS > OBJSET } ## VPSET >, N |>
---			if  INST . REF .:=. E := statements( MM ) [ LAB ] /\ < LABNxt , LABNULL > := nxt(LAB) /\ 
---			O :=   << INST ; env(VPSET) ; MM { < O : CLASS | REF : OLD # SFIS > OBJSET } >> /\ O :: Oid /\ not(isMany(REF)) /\ OPP := opposite(REF) /\
---			RES := << E    ; env(VPSET) ; MM { < O : CLASS | REF : OLD # SFIS > OBJSET } >>		
---	.
		
endm