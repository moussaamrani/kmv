cd /cygdrive/z/Workspace/Maude/KMV/
load syntax/model-checker.maude 
load syntax/mmOdCL.maude
load syntax/MMGDefinitions.maude


view @Class from TRIV to METAMODEL-CTORS is
  sort Elt to @Class .
endv

mod KERMETA-STMT-PREP is
	sort @Statement .
endm

mod KERMETA-SL-CTORS is
	pr METAMODEL-PROP .
	pr MGLIST{@NamedElement} * (sort MGList{@NamedElement} to MyList) .

	pr MGMAYBE{@Class} . 

	--- Operation & Parameters signature
	sort @Operation @Parameter @Variable @LocalVariable .
	subsort @Variable @Parameter < @LocalVariable < Vid .
	subsort @Operation @Parameter @LocalVariable < @StructuralFeature .
	op self : -> @LocalVariable .
	op isReadOnly : @Attribute -> Bool . --- Added for compatibility
	op isReadOnly : @Reference -> Bool . --- Added for compatibility
	op operations : @Class -> MyList . --- of @Operation
	op isAbstract : @Operation -> Bool .
	op from : @StructuralFeature -> Maybe{@Class} .
	op containingOperation : @Parameter -> @Operation .
	op containingOperation : @Variable  -> @Operation .
   	op parameters : @Operation -> MyList . --- of @Parameter
	op variables : @Operation -> MyList .  --- of @Variable
					
	--- Label
	sort @Label @LabelNxt .
	op [_,_,_,_] : @Package @Class @Operation Nat -> @Label [ctor] .
	--- default label
	op [] : -> @Label .
	op <_,_> : @Label @Label -> @LabelNxt [ctor] .
	op nxt : @Label -> @LabelNxt .
	op labels : @Operation -> MyList . --- of @Label
	
	var LV : @LocalVariable .
	op defaultValue : @LocalVariable -> OCL-Type .
	eq defaultValue(LV) = 
		if isMany(LV) then
			if isOrdered(LV) then
				if isUnique(LV) then
					OrderedSet{}
				else
					Sequence{}
				fi
			else
				if isUnique(LV) then
					Set{}
				else
					Bag{}
				fi
			fi
		else 
			if type(LV) :: @DataType then
				defaultValue(type(LV))
			else
				null
			fi
		fi .
endm

view @Label from TRIV to KERMETA-SL-CTORS is
  	sort Elt to @Label .
endv

view @Statement from TRIV to KERMETA-STMT-PREP is
 	sort Elt to @Statement .
endv

view @Operation from TRIV to KERMETA-SL-CTORS is
 	sort Elt to @Operation .
endv

view @LocalVariable from TRIV to KERMETA-SL-CTORS is
	sort Elt to @LocalVariable .	
endv

view OCL-Type from TRIV to MGmOdCL is
    sort Elt to OCL-Type .
endv

mod KERMETA-STATEMENTS-MAP is
	pr MAP{@Label, @Statement} .
	pr MAP{@LocalVariable, OCL-Type} .
endm

mod PAIRS is
	pr KERMETA-SL-CTORS .
	pr MGMAYBE{Bool} .
	sorts EmptyPair AttributePair ReferencePair OperationPair ParameterPair ClassPair Pair .
	sorts BoolPair BoolPairSet .
	subsort EmptyPair AttributePair ReferencePair OperationPair ParameterPair ClassPair < Pair .
	subsort BoolPair < BoolPairSet .
	op <_,_> : @Class @Class -> ClassPair [ctor] .
	op <_,_> : @Parameter @Parameter -> ParameterPair [ctor] .
	op <_,_> : @Operation @Operation -> OperationPair [ctor] .
	op <_,_> : @Reference @Reference -> ReferencePair [ctor] .
	op <_,_> : @Attribute @Attribute -> AttributePair [ctor] .
	
	op [_||_] : Maybe{Bool} Pair -> BoolPair .
	op [] : -> BoolPairSet .
	op __ : BoolPairSet BoolPairSet -> BoolPairSet [assoc comm] .
	
	var BP : BoolPairSet .
	var AP : AttributePair .
	var RP : ReferencePair .
	
	eq BP BP = BP .
	eq [] BP = BP .
	eq [ true || AP ] BP = BP .
	eq [ true || RP ] BP = BP .
endm

mod KERMETA-MT is
	pr KERMETA-SL-CTORS .
	pr KERMETA-STATEMENTS-MAP .
	pr MGMAYBE{@Reference} .
	pr PAIRS .
	
	op statements : @Metamodel -> Map{@Label, @Statement} .
	
	sort @ModelType .
	subsort @Metamodel < @ModelType .

	var C C'     : @Class .
	var ATT ATT' : @Attribute .
	var REF REF' : @Reference .
	var SF SF'   : @StructuralFeature .
	var OP OP'   : @Operation .
	var P P'     : @Parameter .
	var L L'     : MyList .
    var BG BG'   : BoolPair .
	var B B4     : Bool .
    var G        : Pair .
	var MT MT'   : @ModelType .
	
	op _inside_ : @Class @ModelType -> Bool .
	eq C inside MT = (C in allClasses(MT)) .

	op isCorrespondingProperties : @StructuralFeature @StructuralFeature -> Bool .
	eq isCorrespondingProperties(SF', SF) = (name(SF') == name(SF)) and-then 
		(isReadOnly(SF') implies isReadOnly(SF))  and-then
		(isUnique(SF')     ==    isUnique(SF))    and-then
		(isOrdered(SF)   implies isOrdered(SF'))  and-then 
		(lowerBound(SF)    ==    lowerBound(SF')) and-then
		(upperBound(SF)    ==    upperBound(SF')) .

	op _<#_ : @Attribute @Attribute -> Bool .
	eq ATT' <# ATT = ( isCorrespondingProperties(ATT', ATT) ) and-then
		( (type(ATT') == type(ATT)) or-else ( isReadOnly(ATT) and-then subTypeOf(type(ATT'), type(ATT)) ) ) .

	op _<#_ : @Reference @Reference -> Bool .
	eq REF' <# REF =  isCorrespondingProperties(REF', REF) and-then
		(isContainment(REF') == isContainment(REF)) and-then 
		( not(opposite(REF) == null) implies not(opposite(REF') == null) ) and-then 
		(name(opposite(REF)) == name(opposite(REF'))) .

	op _<#_ : @Operation @Operation -> Bool .
	eq OP' <# OP = (name(OP') == name(OP)) and-then
		isCorrespondingParameters(parameters(OP), parameters(OP')) .
	
	op isCorrespondingParameters : MyList MyList -> Bool . --- of @Parameter @Parameter
	eq isCorrespondingParameters(null, null)   = true . --- empty parameter lists
	eq isCorrespondingParameters(nil, nil)   = true .
	eq isCorrespondingParameters(P' L', P L) = 
		isCorrespondingParameter(P', P) and-then
		isCorrespondingParameters(L', L) .
	eq isCorrespondingParameters(L', L) = false [owise] .
		
	op isCorrespondingParameter : @Parameter @Parameter -> Bool .
	eq isCorrespondingParameter(P', P) = 
		(lowerBound(P')   ==    lowerBound(P)) and-then
		(upperBound(P')   ==    upperBound(P)) and-then
		(isUnique(P')     ==    isUnique(P))   and-then
		(isOrdered(P')  implies isOrdered(P))  .

	op lookupCorrespondingSF : @StructuralFeature MyList -> Bool . --- @StructuralFeature
	eq lookupCorrespondingSF(SF, nil) = false .
	eq lookupCorrespondingSF(SF, SF' L) = (SF <# SF') or-else lookupCorrespondingSF(SF, L) .
	
	op lookupCorresponding : MyList MyList -> Bool . --- @StructuralFeature, @StructuralFeature
	eq lookupCorresponding(nil, L) = true .
	eq lookupCorresponding(SF L, L') = lookupCorrespondingSF(SF, L') and-then lookupCorresponding(L, L') .
	
	op isCorrespondingClasses : @Class @Class -> Bool .
	eq isCorrespondingClasses(C', C) = (name(C) == name(C')) and-then
		lookupCorresponding(operations(C), operations(C')) and-then
		lookupCorresponding(attributes(C), attributes(C')) and-then
		lookupCorresponding(references(C), references(C')) .

	op refgoal : @Reference @Reference @ModelType @ModelType -> BoolPair .
	eq refgoal(REF', REF, MT', MT) = 
		if ((type(REF') inside MT') and-then (type(REF) inside MT)) then
			[ true || < type(REF'), type(REF) > ]
		else
			[ ( ( isReadOnly(REF) and-then subTypeOf(type(REF), type(REF')) ) or-else (type(REF') == type(REF)) ) || < REF', REF > ] 
		fi .
	--- return [ check ||  ]

	op attgoal : @Attribute @Attribute @ModelType @ModelType -> BoolPair .
	eq attgoal(ATT', ATT, MT', MT) = 
		[ ( ( isReadOnly(ATT) and-then subTypeOf(type(ATT), type(ATT')) ) or-else (type(ATT') == type(ATT)) ) || < ATT', ATT > ] .
		
	op opgoal : @Operation @Operation @ModelType @ModelType -> BoolPair .
	eq opgoal(OP', OP, MT', MT) = 
		if ((type(OP') == null) and-then (type(OP) == null)) then
			[ true || < OP', OP > ]
		else if ((type(OP') inside MT') and-then (type(OP) inside MT)) then
				[ true || < OP', OP > ]
			else
				[ type(OP') == type(OP) || < OP', OP > ] 
			fi 
		fi .

	op paramgoal : @Parameter @Parameter @ModelType @ModelType -> BoolPair .
	eq paramgoal(P', P, MT', MT) = 
		if ((type(P') inside MT') and-then (type(P) inside MT)) then
			[ true || < type(P'), type(P) > ]
		else
			[ type(P') == type(P) || < containingOperation(P'), containingOperation(P) > ] 
		fi .

	op lookupDependenciesSF : @StructuralFeature MyList -> BoolPairSet . --- @StructuralFeature
	eq lookupDependenciesSF(SF, nil) = [] .
	eq lookupDependenciesSF(SF, SF' L) = 
		if(name(SF) == name(SF')) then --- should be generic over @SF
			refgoal(SF, SF', metamodel(SF), metamodel(SF')) 
		else 
			lookupDependenciesSF(SF, L) 
		fi .
	
	op lookupDependencies : MyList MyList -> BoolPairSet . --- @StructuralFeature, @StructuralFeature
	eq lookupDependencies(nil, L) = [] .
	eq lookupDependencies(SF L, L') = lookupDependenciesSF(SF, L') lookupDependencies(L, L') .
	
	op computeReferencesDependencies : Pair -> BoolPairSet .
	eq computeReferencesDependencies( < C', C > ) = lookupDependencies(references(C), references(C')) . 
	
	op computeOperationsDependencies : Pair -> BoolPairSet .
	eq computeOperationsDependencies(G) = [] .
	
	op computeDependencies : Pair -> BoolPairSet .
	eq computeDependencies (G) = computeReferencesDependencies(G) .

	op _<##_ : @Class @Class -> BoolPairSet .
	eq C' <## C = computeDependencies( < C', C > ) .
endm