cd /cygdrive/z/Workspace/Maude/KMV/
load syntax/model-checker.maude 
load syntax/mmOdCL.maude
load syntax/MMGDefinitions.maude


view @Class from TRIV to METAMODEL-CTORS is
  sort Elt to @Class .
endv

mod KERMETA-STMT-PREP is
	sort @Statement .
endm

mod KERMETA-SL-CTORS is
	pr METAMODEL-PROP .
	pr MGLIST{@NamedElement} * (sort MGList{@NamedElement} to MyList) .

	pr MGMAYBE{@Class} . 

	--- Operation & Parameters signature
	sort @Operation @Parameter @Variable @LocalVariable .
	subsort @Variable @Parameter < @LocalVariable < Vid .
	subsort @Operation @Parameter @LocalVariable < @StructuralFeature .
	op self : -> @LocalVariable .
	op isReadOnly : @Attribute -> Bool . --- Added for compatibility
	op isReadOnly : @Reference -> Bool . --- Added for compatibility
	op operations : @Class -> MyList . --- of @Operation
	op isAbstract : @Operation -> Bool .
	op from : @StructuralFeature -> Maybe{@Class} .
	op containingOperation : @Parameter -> @Operation .
	op containingOperation : @Variable  -> @Operation .
   	op parameters : @Operation -> MyList . --- of @Parameter
	op variables : @Operation -> MyList .  --- of @Variable
					
	--- Label
	sort @Label @LabelNxt .
	op [_,_,_,_] : @Package @Class @Operation Nat -> @Label [ctor] .
	--- default label
	op [] : -> @Label .
	op <_,_> : @Label @Label -> @LabelNxt [ctor] .
	op nxt : @Label -> @LabelNxt .
	op labels : @Operation -> MyList . --- of @Label
	
	var LV : @LocalVariable .
	op defaultValue : @LocalVariable -> OCL-Type .
	eq defaultValue(LV) = 
		if isMany(LV) then
			if isOrdered(LV) then
				if isUnique(LV) then
					OrderedSet{}
				else
					Sequence{}
				fi
			else
				if isUnique(LV) then
					Set{}
				else
					Bag{}
				fi
			fi
		else 
			if type(LV) :: @DataType then
				defaultValue(type(LV))
			else
				null
			fi
		fi .
endm

view @Label from TRIV to KERMETA-SL-CTORS is
  	sort Elt to @Label .
endv

view @Statement from TRIV to KERMETA-STMT-PREP is
 	sort Elt to @Statement .
endv

view @Operation from TRIV to KERMETA-SL-CTORS is
 	sort Elt to @Operation .
endv

view @LocalVariable from TRIV to KERMETA-SL-CTORS is
	sort Elt to @LocalVariable .	
endv

view OCL-Type from TRIV to MGmOdCL is
    sort Elt to OCL-Type .
endv

mod KERMETA-STATEMENTS-MAP is
	pr MAP{@Label, @Statement} .
	pr MAP{@LocalVariable, OCL-Type} .
endm

mod PAIRS is
	pr KERMETA-SL-CTORS .
	pr MGMAYBE{Bool} .
	sorts EmptyPair AttributePair ReferencePair OperationPair ParameterPair ClassPair Pair .
	subsort EmptyPair < AttributePair ReferencePair OperationPair ParameterPair ClassPair < Pair .

	op <<>>    : -> EmptyPair .
	op <_,_> : @Class @Class -> ClassPair [ctor] .
	op <_,_> : @Parameter @Parameter -> ParameterPair [ctor] .
	op <_,_> : @Operation @Operation -> OperationPair [ctor] .
	op <_,_> : @Reference @Reference -> ReferencePair [ctor] .
	op <_,_> : @Attribute @Attribute -> AttributePair [ctor] .
	

	sorts BoolPair .

	op [_||_] : Maybe{Bool} Pair -> BoolPair [ctor] .
endm

view BoolPair from TRIV to PAIRS is
	sort Elt to BoolPair .
endv

mod BOOLPAIRSET is
	pr KERMETA-STATEMENTS-MAP .
	pr PAIRS .
	pr OCL-SET{BoolPair} * (sort Set{BoolPair} to BoolPairSet) .

	var C C' : @Class .
	var BPS  : BoolPairSet .
	eq [ null || < C', C >], [ true  || < C', C >], BPS = [ true  || < C', C >], BPS .
	eq [ null || < C', C >], [ false || < C', C >], BPS = [ false || < C', C >], BPS .
endm

mod KERMETA-MT is
	pr MGMAYBE{@Reference} .
	pr BOOLPAIRSET .
	op statements : @Metamodel -> Map{@Label, @Statement} .
	
	sort @ModelType .
	subsort @Metamodel < @ModelType .

	var C C'     : @Class .
	var ATT ATT' : @Attribute .
	var REF REF' : @Reference .
	var SF SF'   : @StructuralFeature .
	var OP OP'   : @Operation .
	var P P'     : @Parameter .
	var EXP EXP' : OCL-Exp .
	var EL EL'   : List{OCL-Exp} .
	var L L'     : MyList .
	var BP BP'   : BoolPair .
    var BPS BPS' : BoolPairSet .
	var B B4     : Bool .
    var PAIR PAIR' : Pair .
    var CLASSPAIR CLASSPAIR' : ClassPair .
	var MT MT'   : @ModelType .
	var ENUM ENUM' : @Enumeration .
	var EINST EINST' : @EnumerationInstance .
	
	op _inside_ : @Class @ModelType -> Bool .
	eq C inside MT = (C in allClasses(MT)) .

	op _<#_ : @Enumeration @Enumeration -> Bool .
	eq ENUM' <# ENUM = (name(ENUM') == name(ENUM)) and-then 
		isCorrespondingEnumerations(literals(ENUM'), literals(ENUM)) .
	
	op isCorrespondingEnumerations : List{OCL-Exp} List{OCL-Exp} -> Bool . --- @StructuralFeature, @StructuralFeature
	eq isCorrespondingEnumerations(mt-ord, EL) = true .
	eq isCorrespondingEnumerations(EXP # EL, EL') = isCorrespondingEnumerations$(EXP, EL') and-then isCorrespondingEnumerations(EL, EL') .
	
	op isCorrespondingEnumerations$ : OCL-Exp List{OCL-Exp} -> Bool .
	eq isCorrespondingEnumerations$(EXP, mt-ord) = false .
	eq isCorrespondingEnumerations$(EXP, EXP' # EL) = (name(EXP') == name(EXP)) or-else isCorrespondingEnumerations$(EXP, EL) .

	op isCorrespondingProperties : @StructuralFeature @StructuralFeature -> Bool .
	eq isCorrespondingProperties(SF', SF) = (name(SF') == name(SF)) and-then 
		(isReadOnly(SF') implies isReadOnly(SF))  and-then
		(isUnique(SF')     ==    isUnique(SF))    and-then
		(isOrdered(SF)   implies isOrdered(SF'))  and-then 
		(lowerBound(SF)    ==    lowerBound(SF')) and-then
		(upperBound(SF)    ==    upperBound(SF')) .

	op requiredReferences : @Class -> @MyList . --- of @Reference
	eq requiredReferences(C) = requiredReferences(references(C)) .
	
	op requiredReferences : MyList -> MyList . --- of @Reference
	eq requiredReferences(nil) = nil .
	eq requiredReferences(REF L) = 
		if (isRequired(REF)) then
			REF requiredReferences(L)
		else
			requiredReferences(L)
		fi
	.

	op _<#_ : @Attribute @Attribute -> Bool .
	eq ATT' <# ATT = ( isCorrespondingProperties(ATT', ATT) ) and-then
		if(type(ATT') :: @Enumeration and-then type(ATT) :: @Enumeration) then
			type(ATT') <# type(ATT')
		else
			( (type(ATT') == type(ATT)) or-else ( isReadOnly(ATT) and-then subTypeOf(type(ATT'), type(ATT)) ) ) 
		fi .

	op _<#_ : @Reference @Reference -> Bool .
	eq REF' <# REF =  isCorrespondingProperties(REF', REF) and-then
		(isContainment(REF') == isContainment(REF)) and-then 
		( not(opposite(REF) == null) implies not(opposite(REF') == null) ) and-then 
		(name(opposite(REF)) == name(opposite(REF'))) .

	op _<#_ : @Operation @Operation -> Bool .
	eq OP' <# OP = (name(OP') == name(OP)) and-then
		isCorrespondingParameters(parameters(OP), parameters(OP')) .
	
	op isCorrespondingParameters : MyList MyList -> Bool . --- of @Parameter @Parameter
	eq isCorrespondingParameters(null, null)   = true . --- empty parameter lists
	eq isCorrespondingParameters(nil, nil)   = true .
	eq isCorrespondingParameters(P' L', P L) = 
		isCorrespondingParameter(P', P) and-then
		isCorrespondingParameters(L', L) .
	eq isCorrespondingParameters(L', L) = false [owise] .
		
	op isCorrespondingParameter : @Parameter @Parameter -> Bool .
	eq isCorrespondingParameter(P', P) = 
		(lowerBound(P')   ==    lowerBound(P)) and-then
		(upperBound(P')   ==    upperBound(P)) and-then
		(isUnique(P')     ==    isUnique(P))   and-then
		(isOrdered(P')  implies isOrdered(P))  .

	op lookupCorrespondingSF : @StructuralFeature MyList -> Bool . --- @StructuralFeature
	eq lookupCorrespondingSF(SF, nil) = false .
	eq lookupCorrespondingSF(SF, SF' L) = (SF <# SF') or-else lookupCorrespondingSF(SF, L) .
	
	op lookupCorresponding : MyList MyList -> Bool . --- @StructuralFeature, @StructuralFeature
	eq lookupCorresponding(nil, L) = true .
	eq lookupCorresponding(SF L, L') = lookupCorrespondingSF(SF, L') and-then lookupCorresponding(L, L') .
	
	op isCorrespondingClasses : @Class @Class -> Bool .
	eq isCorrespondingClasses(C', C) = (name(C) == name(C')) and-then
		lookupCorresponding(operations(C), operations(C')) and-then
		lookupCorresponding(attributes(C), attributes(C')) and-then
		lookupCorresponding(references(C), references(C')) .

	op isCorrespondingInstanceClasses : @Class @Class -> Bool .
	eq isCorrespondingInstanceClasses(C', C) = (name(C) == name(C')) and-then
		(isAbstract(C') implies isAbstract(C)) and-then
		lookupCorresponding(operations(C), operations(C')) and-then
		lookupCorresponding(attributes(C), attributes(C')) and-then
		lookupCorresponding(references(C), references(C')) and-then 
		lookupCorresponding(references(C), references(C')) .

	op goal : @Reference @Reference @ModelType @ModelType -> BoolPairSet .
	eq goal(REF', REF, MT', MT) = 
		if ((type(REF) inside MT) and-then (type(REF') inside MT')) then
			[ null || < type(REF), type(REF') > ]
		else
			[ ( ( isReadOnly(REF') and-then subTypeOf(type(REF'), type(REF)) ) or-else (type(REF) == type(REF')) ) || < REF, REF' > ] 
		fi .
		
	op goal : @Attribute @Attribute @ModelType @ModelType -> BoolPairSet .
	eq goal(ATT', ATT, MT', MT) = 
		[ (type(ATT') :: @Enumeration) or-else ( ( isReadOnly(ATT') and-then subTypeOf(type(ATT'), type(ATT)) ) or-else (type(ATT) == type(ATT')) ) || < ATT, ATT' > ] .
	
	op goal : @Operation @Operation @ModelType @ModelType -> BoolPairSet .
	eq goal(OP', OP, MT', MT) = goal$(OP', OP, MT', MT), 
		goalParameters(OP', OP, parameters(OP'), parameters(OP), MT', MT) .
		
	op goal$ : @Operation @Operation @ModelType @ModelType -> BoolPairSet .
	eq goal$(OP', OP, MT', MT) = 
		if ((type(OP') == null) and-then (type(OP) == null)) then
			[ true || < OP, OP' > ]
		else if ((type(OP') :: @DataType) and-then (type(OP) :: @DataType)) then
				[ subTypeOf(type(OP), type(OP')) || < OP, OP' > ]
			else if ((type(OP') inside MT') and-then (type(OP) inside MT)) then
					[ null || < type(OP), type(OP') > ], [ true || < OP, OP' > ]
				else
					[ type(OP) == type(OP') || < OP, OP' > ] 
				fi 
			fi 
		fi .

	op goalParameters : @Operation @Operation MyList MyList @ModelType @ModelType -> BoolPairSet .
	eq goalParameters(OP', OP, null, null, MT', MT) = empty .
	eq goalParameters(OP', OP, nil, nil, MT', MT)   = empty .
	eq goalParameters(OP', OP, P' L', P L, MT', MT) = (goal(P', P, MT', MT), goalParameters(OP', OP, L', L, MT', MT)) .
	eq goalParameters(OP', OP, L', L, MT', MT) = [ false || < OP, OP' >] [owise] .

	op goal : @Parameter @Parameter @ModelType @ModelType -> BoolPairSet .
	eq goal(P', P, MT', MT) = 
		if ((type(P') :: @DataType) and-then (type(P) :: @DataType)) then
			[ subTypeOf(type(P), type(P')) || < P, P' > ]
		else if ((type(P') inside MT') and-then (type(P) inside MT)) then
				[ null || < type(P), type(P') > ], [ true || < P, P' >]
			else 
				[ type(P) == type(P') || < containingOperation(P), containingOperation(P') > ], [ true || < P, P' >]
			fi 
		fi .

	op lookupDependenciesSF : @StructuralFeature MyList -> BoolPairSet . --- @StructuralFeature
	eq lookupDependenciesSF(SF, nil) = empty .
	eq lookupDependenciesSF(SF, SF' L) = 
		if(name(SF) == name(SF')) then
			goal(SF, SF', metamodel(SF), metamodel(SF')) 
		else 
			lookupDependenciesSF(SF, L) 
		fi .
	
	op lookupDependencies : MyList MyList -> BoolPairSet . --- @StructuralFeature, @StructuralFeature
	eq lookupDependencies(nil, L) = empty .
	eq lookupDependencies(SF L, L') = lookupDependenciesSF(SF, L'), lookupDependencies(L, L') .
 
 	op computeDependencies : Pair -> BoolPairSet .
	eq computeDependencies (< C', C >) = lookupDependencies(references(C), references(C')), 
		lookupDependencies(attributes(C), attributes(C')), 
		lookupDependencies(operations(C), operations(C')) .

	sort Config .
	op <|_;_|> : ClassPair BoolPairSet -> Config .

	var CFG CFG' : Config .

	op verdict : Config -> Bool .
	eq verdict(<| CLASSPAIR ; [ false || PAIR ], BPS |>) = false .
	eq verdict(CFG) = true [owise] .

	op eval : Config -> Config .
	eq eval(<| <<>>      ; ([ null  || CLASSPAIR ], BPS) |>) = <| CLASSPAIR ; BPS |> .
	eq eval(<| < C', C > ;                          BPS  |>) = <| <<>> ; [ (isCorrespondingClasses(C', C)) || < C', C > ], BPS, computeDependencies(< C', C >) |> .
	eq eval(CFG) = CFG [owise] .

	op check : Config -> Bool .
	ceq check(CFG) = if(CFG' == CFG) then verdict(CFG') else check(CFG') fi 
		if CFG' := eval(CFG) .
	
	op _<#_ : @Class @Class -> Bool .
	eq C' <# C = check(<| < C', C > ; empty |>) .
	
	op _<#_ : @ModelType @ModelType -> Bool .

endm