cd /cygdrive/f/Workspace/Maude/KMV/
load syntax/model-checker.maude 
load syntax/mOdCL.maude
load syntax/MGDefinitions4.maude


view @Class from TRIV to METAMODEL-CTORS is
  sort Elt to @Class .
endv

mod KERMETA-STMT-PREP is
	sort @Statement .
endm

mod KERMETA-SL-CTORS is
	pr METAMODEL-PROP .
	pr MGLIST{@NamedElement} * (sort MGList{@NamedElement} to MyList) .

	pr MGMAYBE{@Class} . 

	--- Operation & Parameters signature
	sort @Operation @Parameter @Variable @LocalVariable .
	subsort @Variable @Parameter < @LocalVariable < Vid .
	subsort @Operation @Parameter @LocalVariable < @StructuralFeature .
	op self : -> @LocalVariable .
	op operations : @Class -> MyList . --- of @Operation
	op isAbstract : @Operation -> Bool .
	op from : @StructuralFeature -> Maybe{@Class} .
	op containingOperation : @Parameter -> @Operation .
	op containingOperation : @Variable  -> @Operation .
   	op parameters : @Operation -> MyList . --- of @Parameter
	op variables : @Operation -> MyList .  --- of @Variable
				
	--- Label
	sort @Label @LabelNxt .
	op [_,_,_,_] : @Package @Class @Operation Nat -> @Label [ctor] .
	--- default label
	op [] : -> @Label .
	op <_,_> : @Label @Label -> @LabelNxt [ctor] .
	op nxt : @Label -> @LabelNxt .
	op labels : @Operation -> MyList . --- of @Label
endm

view @Label from TRIV to KERMETA-SL-CTORS is
  	sort Elt to @Label .
endv

view @Statement from TRIV to KERMETA-STMT-PREP is
 	sort Elt to @Statement .
endv

view @LocalVariable from TRIV to KERMETA-SL-CTORS is
	sort Elt to @LocalVariable .	
endv

view OCL-Type from TRIV to MGmOdCL is
    sort Elt to OCL-Type .
endv

mod KERMETA-STATEMENTS-MAP is
	pr MAP{@Label, @Statement} .
	pr MAP{@LocalVariable, OCL-Type} .
endm

mod KERMETA-SL is
	pr KERMETA-SL-CTORS .
	pr KERMETA-STATEMENTS-MAP .
	op statements : @Metamodel -> Map{@Label, @Statement} .
endm

--- ------------------------------------------------------------------------------------
--- Action Language Syntax
--- 
--- Body ::= [Stm]+
--- Stm  ::= lab: Stmt
--- Stmt ::= condStmt 
---       |  assignStmt | castStmt
---       |  instanceCreationStmt 
---       |  collStmt
---       |  returnStmt | callStmt 
--- CondStmt             ::= <if> exp
--- AssignStmt           ::= lhs := exp
--- InstanceCreationStmt ::= var := exp
--- ReturnStmt           ::= <return> | <return> exp
--- CallStmt             ::= call | var := call
--- Call                 ::= target.op(exp*)
--- ------------------------------------------------------------------------------------
mod KERMETA-AL is
	pr KERMETA-STMT-PREP .
    pr METAMODEL-PROP .
                
	sort    @CondStmt @AssignStmt @InstanceCreationStmt @CallStmt @ReturnStmt .
	subsort @CondStmt @AssignStmt @InstanceCreationStmt @CallStmt @ReturnStmt < @Statement .
	
	op iff_      : OCL-Exp -> @CondStmt [ctor] .
   	op _.:=._      : OCL-Exp OCL-Exp -> @AssignStmt [ctor] .
   	op _:=new(_) : OCL-Exp OCL-Exp -> @InstanceCreationStmt [ctor] .
   	op return    : -> @ReturnStmt [ctor] .
   	op return_   : OCL-Exp -> @ReturnStmt [ctor] .
endm



mod KERMETA-DOMAIN is
	pr OCL-TYPE .
	pr METAMODEL-PROP .
	pr KERMETA-SL-CTORS .
	---pr MAP{@LocalVariable, OclType} .
	sort Domain .
	sort LocalEnv .
	subsort LocalEnv < Set{VarPair} .
	op <_##_> : @Model LocalEnv -> Domain [ctor] .
		
endm

mod KERMETA-STACK is
	pr KERMETA-SL .
	pr KERMETA-STATEMENTS-MAP .
	
	sort StackEntry .
	op `(|_,_,_|`) : @Label Map{@LocalVariable, OCL-Type} @LocalVariable -> StackEntry .
endm

fmod STACK{X :: TRIV} is
	protecting BOOL .

	sorts NeStack{X} Stack{X} .
	subsort NeStack{X} < Stack{X} .

	op (||) : -> Stack{X} [ctor] .
	op push : X$Elt Stack{X} -> NeStack{X} [ctor] .
	op pop : NeStack{X} -> Stack{X} .
	op top : NeStack{X} -> X$Elt .
	op isEmpty : Stack{X} -> Bool .

	var S : Stack{X} .
	var E : X$Elt .
	eq pop(push(E, S)) = S .
	eq top(push(E, S)) = E .
	eq isEmpty( (||) ) = true .
	eq isEmpty(push(E, S)) = false .
endfm

view StackEntry from TRIV to KERMETA-STACK is
	sort Elt to StackEntry .
endv

mod KERMETA-CONFIGURATION is
	pr KERMETA-SL .
	pr STACK{StackEntry} .
	pr KERMETA-DOMAIN .
	
	sort KConfig .
	op <|_,_,_|> : @Label Stack{StackEntry} Domain -> KConfig .
	
	var LAB : @Label .
	var S : Stack{StackEntry} .
	var D : Domain .
	
	op finished_ : KConfig -> Bool .
	eq finished(<| [], S, D |>) = isEmpty(S) .
	eq finished(<| LAB, S, D |>) = false [owise] .
endm
mod KERMETA is

	pr KERMETA-AL .
	pr KERMETA-CONFIGURATION .
	
	vars LAB LABE LABT  : @Label .
	vars D : Domain .
	vars VPSET : Set{VarPair} .
	vars M : @Model .
	vars S : Stack{StackEntry} .
	vars E : OCL-Exp .
	
	op exec_ : KConfig -> KConfig .
	ceq exec(<| LAB, S, < M ## VPSET > |>) = <| LABT, S, < M ## VPSET > |> 
		if  iff( E ) := statements( meta(M) ) [ LAB ] /\ 
			< LABT , LABE > := nxt(LAB) /\ false = << E ; env(VPSET) ; M >> .
	
	ceq exec(<| LAB, S, < M ## VPSET > |>) = <| LABE, S, < M ## VPSET > |> 
		if  iff( E ) := statements( meta(M) ) [ LAB ] /\ 
			< LABT , LABE > := nxt(LAB) /\ true = << E ; env(VPSET) ; M >> .
	
	
endm

--- reduce exec <| [FSM, FSM@FSM, getStart@FSM@FSM,  2] , (||) , < FSMModel ## putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) > |> .
