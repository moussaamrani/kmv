mod EXPRESSION-SYNTAX is
--- Expression BNF:
--- Exp       ::= null | scalarExp | instExp | collExp
--- ScalarExp ::= literal | instExp instanceof pClassN
--- InstExp   ::= self | lhs
--- Lhs       ::= varN | paramN | target.propN
--- Target    ::= super | instExp
--- CollExp   ::= exp.nativeExp
--- NativeExp ::= isEmpty() | size() | at(exp) 
--- 
--- LocalN    ::= varN | paramN | self
--- 
--- TODO: Need to add operations on primitive types

	pr mOdCL * (--- Renamings of CONFIGURATION module elements
				sort Cid           to @Class,
				sort Object        to @Object,
				sort Attribute     to @StructuralFeatureInstance,
				sort AttributeSet  to Set{@StructuralFeatureInstance},
				op none : -> AttributeSet to empty,
				--- Renamings of mOdCL elements
				sort AttributeName to @StructuralFeature,
				sort Enum to @EnumerationInstance,
				sort BasicType to @DataTypeInstance,
				--- Renamings of _,_ due to conflict with prefix notation 
				op _`,_ to _#_,
				op _:_ to _:_ [prec 20 gather (e &)] ) .	

	pr QID * (op _|_   : Nat Nat -> Nat  to _|N_,    
                op _xor_ : Nat Nat -> Nat to _nxor_,   
                op _<_   : Nat Nat -> Bool to _<N_,    
                op _<=_  : Nat Nat -> Bool to _<=N_,   
                op _>_   : Nat Nat -> Bool to _>N_,    
                op _>=_  : Nat Nat -> Bool to _>=N_,   
                op _*_   : Nat Nat -> Nat to _*N_,     
                op _+_   : Nat Nat -> Nat to _+N_,
 
                op _<_  : String String -> Bool to _lt_,   
                op _<=_ : String String -> Bool to _leq_,   
                op _>_  : String String -> Bool to _gt_,   
                op _>=_ : String String -> Bool to _geq_,  
                op _+_  : String String -> String to _++_) .


	pr QID .
	sorts Var Param Self InstExp Lhs Target NativeExp CollExp Exp ExpList .
	subsort Qid < Var .
	subsort Qid < Param .
	subsort Var Param < Lhs .
	subsort Lhs Self < InstExp < Exp .
	subsort CollExp < Exp .
	subsort Exp < ExpList .
	subsort InstExp < Target .
	sort Label .
	
	--- Null Expression
	op null : -> Exp . --- ctor ?

	--- Kermeta Keywords (parts of InstExp)
	op kself  : -> InstExp . --- ctor ?
	op super : -> Target .

	--- InstanceOf (part of ScalarExp) 
	--- uses Qid instead of PClassN)
	op _instanceof_ : InstExp Qid -> Exp .

	--- Property Access (part of Lhs)
	op _._ : Target Qid -> Lhs [gather(e E)] . --- ctor ?

	--- Collection Expressions (CollExp)
	op isEmpty() : -> NativeExp .
    op size() : -> NativeExp .

	op at(_) : Int -> NativeExp .
	op _._ : Exp NativeExp -> CollExp . --- ctor ?
	
	--- Handling Expressions Lists
	op noExp : -> ExpList .
	op _,_ : ExpList ExpList -> ExpList [assoc id: noExp] .	
endm


--- mod DOMAIN is
	--- pr METAMODEL-PROP .                
    
--- 	sort LocalEnv Domain .
	--- subsort Set{VarPair} < LocalEnv .
	--- op (_,_) : @Model Msg -> Domain .
--- endm

mod STARGET is
	pr EXPRESSION-SYNTAX .
	             
	sorts ObjectProperty STarget .
	subsorts Var Param Self ObjectProperty < STarget . 
	op <_;_> : Oid @StructuralFeature -> STarget . --- ctor ?
***	op d(_,_) : Var Domain -> OCLType .
*** op d(_,_) : Param Domain -> OCLType .
*** op d(_,_) : ObjectProperty Domain -> OCLType .

--- var VL : Set{VarPair} .
*** eq d(V:Var, (m,env(VL))) = 
endm

mod LOCAL-ENVIRONMENT is
	pr EXPRESSION-SYNTAX .
	sort LocalValuation .
	op _<-_ : Var OCL-Type -> LocalValuation .
	op _<-_ : Param OCL-Type -> LocalValuation .
endm

mod ENVIRONMENT is
	pr EXPRESSION-SYNTAX .
	sort Environment .
	
	op (_,_,_) : Label Set{LocalValuation} Var -> Environment .
endm

view Environment from TRIV to ENVIRONMENT is
  sort Elt to Environment .
endv

mod CONFIGURATION is
	pr LIST{Environment} * (sort List{Environment} to Stack, sort NeList{Environment} to NeStack) .
	pr EXPRESSION-SYNTAX .
	sort Config .

	
endm

















mod STATEMENT-SYNTAX is
	ex EXPRESSION-SYNTAX .
	sort Lab .
	sorts Stm Stmt StmList Block Call NativeStmt .
	subsorts Call < Stmt .
	subsorts Block < Stm < StmList .
	
	op _:_ : Lab Stmt -> Stm [ctor] .
	op {_} : StmList -> Block .
	op __ : StmList StmList -> StmList [assoc] .
		
	op if__fi  : Exp Stmt -> Stmt .
	op _:=_     : Lhs Exp  -> Stmt .
	op _=_.new : Var Qid -> Stmt . 
	op return  : -> Stmt .
	op return_ : Exp -> Stmt .
	op _._(_)  : Target Qid ExpList -> Call .
	op _=_     : Var Call -> Stmt .  
	op add_    : Exp -> NativeStmt .
	op del_    : Exp -> NativeStmt .
	op _._ : Exp NativeStmt -> Stmt .
endm

view Label from TRIV to STATEMENT-SYNTAX is
  sort Elt to Label .
endv
