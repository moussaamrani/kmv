--- set trace on .

mod FSM-MODEL is
	protecting FSM-MM .
	protecting MAUDELING .
	
	op FSMModel : -> @Model .
	op FSMModel : -> @Model .
	eq FSMModel = FiniteStateMachine {
		< 'fsm : FSM@FSM | label@Label@FSM : "(ab)+c" # 
						alphabet@FSM@FSM : Set {"a" ; "b" ; "c" } #
						states@FSM@FSM : OrderedSet {'one # 'two # 'three} # 
						transitions@FSM@FSM : OrderedSet {'a # 'b # 'c} >
		
		< 'one : State@FSM | label@Label@FSM : "1" #
						fsm@State@FSM : 'fsm #
						kind@State@FSM : START@Kind@FSM # 
						in@State@FSM : Set {'b} #
						out@State@FSM : Set {'a} >
		
		< 'two : State@FSM | label@Label@FSM : "2" #
						fsm@State@FSM : 'fsm #
						kind@State@FSM : NORMAL@Kind@FSM # 
						in@State@FSM : Set {'a} #
						out@State@FSM : Set {'b ; 'c} >
		
		< 'three : State@FSM | label@Label@FSM : "3" #
						fsm@State@FSM : 'fsm #
						kind@State@FSM : STOP@Kind@FSM # 
						in@State@FSM : Set {'c} #
						out@State@FSM : Set {mt} >

		< 'a : Transition@FSM | label@Label@FSM : "a" #
						fsm@Transition@FSM : 'fsm #
						src@Transition@FSM : 'one #
						tgt@Transition@FSM : 'two >

		< 'b : Transition@FSM | label@Label@FSM : "b" #
						fsm@Transition@FSM : 'fsm #
						src@Transition@FSM : 'two #
						tgt@Transition@FSM : 'one >
	
		< 'c : Transition@FSM | label@Label@FSM : "c" #
						fsm@Transition@FSM : 'fsm #
						src@Transition@FSM : 'two #
						tgt@Transition@FSM : 'three >
	} .
	
endm


--- Testing Control Flow

--- reduce nxt([FSM, FSM@FSM, fire@State@FSM,  1]) .
--- reduce nxt([FSM, FSM@FSM, accept@FSM@FSM,    6]) .
--- reduce nxt([FSM, Label@FSM, set@Label@FSM,     1]) .
--- reduce nxt([FSM, FSM@FSM, fire@State@FSM,    2]) .
--- reduce nxt([FSM, FSM@FSM, simplify@FSM@FSM, 1]) .

--- reduce statements(FiniteStateMachine)[[FSM, FSM@FSM, fire@State@FSM,  1]] .
--- reduce statements(FiniteStateMachine)[[FSM, FSM@FSM, accept@FSM@FSM,    8]] .
--- reduce statements(FiniteStateMachine)[[FSM, FSM@FSM, accept@FSM@FSM,    6]] .
--- reduce statements(FiniteStateMachine)[[FSM, Label@FSM, set@Label@FSM,     1]] .
--- reduce statements(FiniteStateMachine)[[FSM, FSM@FSM, simplify@FSM@FSM, 1]] .

--- Testing Expression parsing / evaluation

--- reduce << i@getStart@FSM@FSM + 1 :: @DataType ; env( putVar(i@getStart@FSM@FSM <- 1, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << states@FSM@FSM -> size() ; env( putVar(i@getStart@FSM@FSM <- 3, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << i@getStart@FSM@FSM .=. states@FSM@FSM -> size() ; env( putVar(i@getStart@FSM@FSM <- 3, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << states@FSM@FSM -> at(i@getStart@FSM@FSM) . kind@State@FSM ; env( putVar(i@getStart@FSM@FSM <- 3, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .

--- reduce << (i@getStart@FSM@FSM .=. states@FSM@FSM -> size()) or (states@FSM@FSM -> at(i@getStart@FSM@FSM) . kind@State@FSM .=. START@Kind@FSM) ; env( putVar(i@getStart@FSM@FSM <- 1, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << (i@getStart@FSM@FSM .=. states@FSM@FSM -> size()) or (states@FSM@FSM -> at(i@getStart@FSM@FSM) . kind@State@FSM .=. START@Kind@FSM) ; env( putVar(i@getStart@FSM@FSM <- 2, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << states@FSM@FSM -> at(i@getStart@FSM@FSM) . kind@State@FSM .=. START@Kind@FSM ; env( putVar(i@getStart@FSM@FSM <- 1, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << states@FSM@FSM -> at(i@getStart@FSM@FSM) . kind@State@FSM .=. START@Kind@FSM ; env( putVar(i@getStart@FSM@FSM <- 2, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .

--- reduce << states@FSM@FSM -> at(i@getStart@FSM@FSM) . kind@State@FSM ; env( putVar(i@getStart@FSM@FSM <- 1, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce << states@FSM@FSM -> at(1) . kind@State@FSM ; empty ; FSMModel >> .
--- reduce << self . out@State@FSM -> asSequence() ; env(putVar(self <- 'two, empty)) ; FSMModel >> .

--- Testing ConditionalStmt
-----------------------------------------------------------------------------------
--- reduce exec <| [FSM, FSM@FSM, getStart@FSM@FSM,  2] , NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 1, putVar(self <- 'fsm, empty)) > , 0 |> .
--- reduce exec <| [FSM, FSM@FSM, getStart@FSM@FSM,  2] , NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 2, putVar(self <- 'fsm, empty)) > , 0 |> .

--- Testing NewInstStmt
-----------------------------------------------------------------------------------
--- reduce exec <| [FSM, FSM@FSM, accept@FSM@FSM,    8], NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) > , 0 |> .
--- reduce exec <| [FSM, FSM@FSM, accept@FSM@FSM,    9], NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) > , 0 |> .
--- reduce exec <| [FSM, FSM@FSM, accept@FSM@FSM,   10], NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) > , 0 |> .
--- reduce exec <| [FSM, FSM@FSM, accept@FSM@FSM,   11], NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) > , 0 |> .

--- Testing CallStmt
-----------------------------------------------------------------------------------
--- reduce getByName("accept" , Transition@FSM) .
--- reduce getByName("accept" , State@FSM) .
--- reduce getByName("accept" , FSM@FSM) .

--- reduce lookup("accept" , Transition@FSM) .
--- reduce lookup("accept" , State@FSM) .
--- reduce lookup("accept", FSM@FSM) .

--- 
--- reduce statements(FiniteStateMachine)[[FSM, FSM@FSM, accept@FSM@FSM,    3]] .
--- reduce << current@accept@FSM@FSM ; env(putVar(current@accept@FSM@FSM <- 'one , putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm , empty)))) ; FSMModel >> .

--- reduce << toEval@accept@FSM@FSM -> at(i@accept@FSM@FSM) ; env(putVar(toEval@accept@FSM@FSM  <- Sequence{"a" # "b" # "c"} , putVar(current@accept@FSM@FSM <- 'one , putVar(i@accept@FSM@FSM <- 1, putVar(self <- 'fsm , empty))))) ; FSMModel >> .
--- reduce exec(<| [FSM, FSM@FSM, accept@FSM@FSM,    1], NOPE , < FSMModel ## putVar(current@accept@FSM@FSM <- 'one , putVar(i@accept@FSM@FSM <- 0, putVar(self <- 'fsm, empty))) > , 0 |>) .

--- Testing AssignStmt
-----------------------------------------------------------------------------------
--- reduce << self . states@FSM@FSM -> at(i@getStart@FSM@FSM) ; env( putVar(i@getStart@FSM@FSM <- 1, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .
--- reduce putVar(toEval@accept@FSM@FSM <- Sequence {"a" # "b" # "c"} , putVar(isNull@accept@FSM@FSM <- false , putVar(final@accept@FSM@FSM <- 'three , putVar(current@accept@FSM@FSM <- 'one , putVar(i@accept@FSM@FSM <- 1, putVar(self <- 'fsm, empty)))))) .

--- reduce exec(<| [FSM, FSM@FSM, getStart@FSM@FSM,  3], NOPE , < FSMModel ## putVar(i@getStart@FSM@FSM <- 1, empty) > , 0 |>) .
--- reduce exec(<| [FSM, FSM@FSM, accept@FSM@FSM,    9], NOPE , < FSMModel ## putVar(toEval@accept@FSM@FSM <- Sequence {"a" # "b" # "c"} , putVar(isNull@accept@FSM@FSM <- false , putVar(final@accept@FSM@FSM <- 'three , putVar(current@accept@FSM@FSM <- 'one , putVar(i@accept@FSM@FSM <- 1, putVar(self <- 'fsm, empty)))))) > , 0 |>) .
--- reduce exec( exec(<| [FSM, FSM@FSM, fire@State@FSM,  1], NOPE , < FSMModel ## putVar(trans@fire@State@FSM <- null , putVar(self <- 'two, empty)) > , 0 |>) ) .
--- reduce exec(<| [FSM, FSM@FSM, simplify@FSM@FSM, 1], NOPE , < FSMModel ## putVar(self <- 'fsm, empty) > , 0 |>) .


--- Testing PROGRAM
-----------------------------------------------------------------------------------
--- reduce exec(<| [FSM, FSM@FSM, accept@FSM@FSM,    6], NOPE , < FSMModel ## 
--- 	putVar(toEval@accept@FSM@FSM <- Sequence {"a" # "b" # "c"} , putVar(isNull@accept@FSM@FSM <- false , putVar(final@accept@FSM@FSM <- 'three , putVar(current@accept@FSM@FSM <- 'one , putVar(i@accept@FSM@FSM <- 1, putVar(self <- 'fsm, empty)))))) > , 0 |>) .

--- reduce exec(<| [FSM, FSM@FSM, accept@FSM@FSM,    7], NOPE , < FSMModel ##
--- 	putVar(toEval@accept@FSM@FSM <- Sequence {"a" # "b" # "c"} , putVar(isNull@accept@FSM@FSM <- false , putVar(final@accept@FSM@FSM <- 'three , putVar(current@accept@FSM@FSM <- 'one , putVar(i@accept@FSM@FSM <- 1, putVar(self <- 'fsm, empty)))))) > , 0 |>) .

--- reduce run(<| [FSM, FSM@FSM, fire@State@FSM,    2], NOPE , < FSMModel ##
---	putVar(trans@fire@State@FSM <- null , empty) > , 0 |>) .
	