mod FSM-MODEL is
	protecting FSM-MM .
	protecting MAUDELING .
	
	op FSMModel : -> @Model .
	op FSMModel : -> @Model .
	eq FSMModel = FiniteStateMachine {
		< 'fsm : FSM@FSM | label@Label@FSM : "(ab)+c" # 
						alphabet@FSM@FSM : Set {"a" ; "b" ; "c" } #
						states@FSM@FSM : Set {'one ; 'two ; 'three} # 
						transitions@FSM@FSM : Set {'a ; 'b ; 'c} >
		
		< 'one : State@FSM | label@Label@FSM : "1" #
						fsm@State@FSM : 'fsm #
						kind@State@FSM : START@Kind@FSM # 
						in@State@FSM : Set {'b} #
						out@State@FSM : Set {'a} >
		
		< 'two : State@FSM | label@Label@FSM : "2" #
						fsm@State@FSM : 'fsm #
						kind@State@FSM : NORMAL@Kind@FSM # 
						in@State@FSM : Set {'a} #
						out@State@FSM : Set {'b ; 'c} >
		
		< 'three : State@FSM | label@Label@FSM : "3" #
						fsm@State@FSM : 'fsm #
						kind@State@FSM : STOP@Kind@FSM # 
						in@State@FSM : Set {'c} #
						out@State@FSM : Set {mt} >

		< 'a : Transition@FSM | label@Label@FSM : "a" #
						fsm@Transition@FSM : 'fsm #
						src@Transition@FSM : 'one #
						tgt@Transition@FSM : 'two >

		< 'b : Transition@FSM | label@Label@FSM : "b" #
						fsm@Transition@FSM : 'fsm #
						src@Transition@FSM : 'two #
						tgt@Transition@FSM : 'one >
	
		< 'c : Transition@FSM | label@Label@FSM : "c" #
						fsm@Transition@FSM : 'fsm #
						src@Transition@FSM : 'two #
						tgt@Transition@FSM : 'three >
	} .
	
endm


reduce nxt([FSM, FSM@FSM, getStart@FSM@FSM,  2]) .

reduce statements(FiniteStateMachine)[[FSM, FSM@FSM, getStart@FSM@FSM,  2]] .

reduce << not (i@getStart@FSM@FSM .=. self . states@FSM@FSM -> size()) ; env( putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) ) ; FSMModel >> .

reduce exec <| [FSM, FSM@FSM, getStart@FSM@FSM,  2] , (||) , < FSMModel ## putVar(i@getStart@FSM@FSM <- 0, putVar(self <- 'fsm, empty)) > |> .

reduce complete (< 'o : Transition@FSM | empty >) .
